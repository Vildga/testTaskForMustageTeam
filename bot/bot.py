import asyncio
import os
import logging
import datetime
from io import BytesIO

import requests

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InputFile,
    BufferedInputFile
)
from openpyxl.workbook import Workbook

# --------------------- LOGGING SETUP --------------------- #
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(name)s: %(message)s"
)

# --------------------- ENV VARIABLES ---------------------- #
BOT_TOKEN = os.getenv("BOT_TOKEN")
API_BASE_URL = os.getenv("API_BASE_URL", "http://localhost:8000")


class AddExpenseState(StatesGroup):
    """–°—Ç–∞–Ω FSM –¥–ª—è –ø–æ–∫—Ä–æ–∫–æ–≤–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏."""
    waiting_for_title = State()
    waiting_for_date = State()
    waiting_for_amount = State()


class ReportPeriodState(StatesGroup):
    """–°—Ç–∞–Ω FSM –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–≤—ñ—Ç—É (–¥–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É —ñ –∫—ñ–Ω—Ü—è)."""
    waiting_for_start = State()
    waiting_for_end = State()


class DeleteExpenseState(StatesGroup):
    """–°—Ç–∞–Ω FSM –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ (–≤–≤–µ–¥–µ–Ω–Ω—è ID)."""
    waiting_for_id = State()


class EditExpenseState(StatesGroup):
    """–°—Ç–∞–Ω FSM –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç—Ç—ñ """
    waiting_for_id = State()
    waiting_for_choice = State()
    waiting_for_new_title = State()
    waiting_for_new_amount = State()


class ReportPeriodChoice(StatesGroup):
    """–°—Ç–∞–Ω FSM –¥–ª—è –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É –∑–≤—ñ—Ç—É"""
    choosing_mode = State()


# --------------------- KEYBOARD ------------------


def get_main_menu() -> ReplyKeyboardMarkup:
    """
    –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –∑ —á–æ—Ç–∏—Ä–º–∞ –∫–Ω–æ–ø–∫–∞–º–∏.
    """
    return ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é –≤–∏—Ç—Ä–∞—Ç"),
                KeyboardButton(text="üìä –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç –∑–∞ –ø–µ—Ä—ñ–æ–¥")
            ],
            [
                KeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ç—Ç—é"),
                KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é")
            ]],
        resize_keyboard=True
    )


def get_date_keyboard() -> ReplyKeyboardMarkup:
    """
    –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –¥–≤–æ–º–∞ –∫–Ω–æ–ø–∫–∞–º–∏: "–°—å–æ–≥–æ–¥–Ω—ñ", "–í—á–æ—Ä–∞".
    –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—Å–µ –æ–¥–Ω–æ –º–æ–∂–µ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É –≤—Ä—É—á–Ω—É (dd.mm.yyyy),
    –Ω–µ –Ω–∞—Ç–∏—Å–∫–∞—é—á–∏ –∂–æ–¥–Ω–æ—ó –∫–Ω–æ–ø–∫–∏.
    """
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìÖ —Å—å–æ–≥–æ–¥–Ω—ñ"), KeyboardButton(text="üìÜ –≤—á–æ—Ä–∞")]
        ],
        resize_keyboard=True
    )


def get_report_period_keyboard() -> ReplyKeyboardMarkup:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —á–æ—Ç–∏—Ä–º–∞ –∫–Ω–æ–ø–∫–∞–º–∏:
    - –û—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å
    - –û—Å—Ç–∞–Ω–Ω—ñ 3 –º—ñ—Å—è—Ü—ñ
    - –£–≤–µ—Å—å —á–∞—Å
    - –í–≤–µ—Å—Ç–∏ –¥–∞—Ç–∏ –≤—Ä—É—á–Ω—É
    """
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üóìÔ∏è –û—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å"),
                KeyboardButton(text="üìâ –û—Å—Ç–∞–Ω–Ω—ñ 3 –º—ñ—Å—è—Ü—ñ")
            ],
            [
                KeyboardButton(text="üïì –£–≤–µ—Å—å —á–∞—Å"),
                KeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –¥–∞—Ç–∏ –≤—Ä—É—á–Ω—É")
            ],
            [
                KeyboardButton(text="üîô –í–∏—Ö—ñ–¥")
            ]
        ],
        resize_keyboard=True
    )
    return kb


def get_edit_options_keyboard() -> ReplyKeyboardMarkup:
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ç—Ä—å–æ–º–∞ –∫–Ω–æ–ø–∫–∞–º–∏:
    - –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É
    - –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å—É–º—É
    - –í–∏—Ö—ñ–¥
    """
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É")],
            [KeyboardButton(text="üìÜ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å—É–º—É")],
            [KeyboardButton(text="üîô –í–∏—Ö—ñ–¥")]
        ],
        resize_keyboard=True
    )
    return kb


# --------------------- HANDLERS ------------------


def register_handlers(dp: Dispatcher):
    """
    –§—É–Ω–∫—Ü—ñ—è, –¥–µ –∑—ñ–±—Ä–∞–Ω—ñ –≤—Å—ñ —Ö–µ–Ω–¥–ª–µ—Ä–∏ –±–æ—Ç–∞:
    1. /start
    2. –î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é –≤–∏—Ç—Ä–∞—Ç (—ñ–∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –æ–±—Ä–∞—Ç–∏ "–°—å–æ–≥–æ–¥–Ω—ñ"/"–í—á–æ—Ä–∞")
    3. –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç –∑–∞ –ø–µ—Ä—ñ–æ–¥ (—ñ–∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –æ–±—Ä–∞—Ç–∏ –∑–∞ "–º—ñ—Å—è—Ü—å" / "3 –º—ñ—Å—è—Ü—ñ" / "–≤–µ—Å—å —á–∞—Å" / "–∫–∞—Å—Ç–æ–º–Ω–∏–π –ø–µ—Ä—ñ–æ–¥")
    4. –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ç—Ç—é
    5. –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é
    """

    # =============== –•–ï–ù–î–õ–ï–† /start ================= #
    @dp.message(Command("start"))
    async def cmd_start(message: Message, state: FSMContext):
        """
        –ù–∞ –∫–æ–º–∞–Ω–¥—É /start –≤–∏–≤–æ–¥–∏–º–æ –≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –π –ø–æ–∫–∞–∑—É—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é.
        """
        await state.clear()
        await message.answer(
            "üëã –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ ‚¨áÔ∏è",
            reply_markup=get_main_menu()
        )

    #  ---------------- –î–û–î–ê–¢–ò –°–¢–ê–¢–¢–Æ –í–ò–¢–†–ê–¢ (ADD EXPENSE) -----------------------

    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–∫–∞—î "–î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é –≤–∏—Ç—Ä–∞—Ç"
    @dp.message(F.text == "‚ûï –î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é –≤–∏—Ç—Ä–∞—Ç")
    async def add_expense_start(message: Message, state: FSMContext):
        """
        –ü–æ—á–∞—Ç–æ–∫ —Å—Ü–µ–Ω–∞—Ä—ñ—é –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏.
        """
        await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∏—Ç—Ä–∞—Ç–∏:")
        await state.set_state(AddExpenseState.waiting_for_title)

    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –Ω–∞–∑–≤—É
    @dp.message(StateFilter(AddExpenseState.waiting_for_title))
    async def get_expense_title(message: Message, state: FSMContext):
        await state.update_data(title=message.text)
        await message.answer(
            "üìÜ –û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –∫–Ω–æ–ø–∫–æ—é –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å –≤—Ä—É—á–Ω—É —É —Ñ–æ—Ä–º–∞—Ç—ñ dd.mm.yyyy",
            reply_markup=get_date_keyboard()
        )
        await state.set_state(AddExpenseState.waiting_for_date)

    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –æ–±–∏—Ä–∞—î "–°—å–æ–≥–æ–¥–Ω—ñ"/"–í—á–æ—Ä–∞" –∞–±–æ –≤–≤–æ–¥–∏—Ç—å –¥–∞—Ç—É –≤—Ä—É—á–Ω—É
    @dp.message(StateFilter(AddExpenseState.waiting_for_date))
    async def get_expense_date(message: Message, state: FSMContext):
        text = message.text.strip().lower()
        today = datetime.date.today()
        if text == "üìÖ —Å—å–æ–≥–æ–¥–Ω—ñ":
            d = today
        elif text == "üìÜ –≤—á–æ—Ä–∞":
            d = today - datetime.timedelta(days=1)
        else:
            try:
                d = datetime.datetime.strptime(text, "%d.%m.%Y").date()
            except ValueError:
                await message.answer(
                    "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ dd.mm.yyyy –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ. ‚¨áÔ∏è")
                return

        await state.update_data(date=str(d))

        await message.answer(
            "üí∏ –í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∏—Ç—Ä–∞—Ç —É –≥—Ä–∏–≤–Ω—è—Ö (UAH):",
            reply_markup=get_main_menu()
        )
        await state.set_state(AddExpenseState.waiting_for_amount)

    # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å —Å—É–º—É
    @dp.message(StateFilter(AddExpenseState.waiting_for_amount))
    async def get_expense_amount(message: Message, state: FSMContext):
        try:
            amount = float(message.text.replace(",", "."))
        except ValueError:
            await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        data = await state.get_data()
        title = data["title"]
        date_ = data["date"]
        user_id = message.from_user.id

        expense_payload = {
            "user_id": user_id,
            "title": title,
            "date": date_,
            "amount_uah": amount
        }

        try:
            r = requests.post(f"{API_BASE_URL}/expenses/", json=expense_payload)
            if r.status_code in (200, 201):
                await message.answer(
                    "‚úÖ –í–∏—Ç—Ä–∞—Ç—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ! ",
                    reply_markup=get_main_menu()
                )
            else:
                await message.answer(
                    "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø—ñ–∑–Ω—ñ—à–µ üòî",
                    reply_markup=get_main_menu()
                )
        except Exception as e:
            await message.answer(
                f"‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ API: —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫.",
                reply_markup=get_main_menu()
            )

        await state.clear()

    #  -------------- –û–¢–†–ò–ú–ê–¢–ò –ó–í–Ü–¢ –ó–ê –ü–ï–†–Ü–û–î (REPORT PERIOD) ----------------------

    @dp.message(F.text == "üìä –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç –∑–∞ –ø–µ—Ä—ñ–æ–¥")
    async def choose_report_mode(message: Message, state: FSMContext):
        await message.answer(
            "–í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–í–≤–µ—Å—Ç–∏ –¥–∞—Ç–∏ –≤—Ä—É—á–Ω—É¬ª:",
            reply_markup=get_report_period_keyboard()
        )
        await state.set_state(ReportPeriodChoice.choosing_mode)

    @dp.message(StateFilter(ReportPeriodChoice.choosing_mode))
    async def process_report_choice(message: Message, state: FSMContext):
        choice = message.text.strip().lower()
        user_id = message.from_user.id

        today = datetime.date.today()
        start_dt = None
        end_dt = today

        if choice == "üóìÔ∏è –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å":
            start_dt = today - datetime.timedelta(days=30)
        elif choice == "üìâ –æ—Å—Ç–∞–Ω–Ω—ñ 3 –º—ñ—Å—è—Ü—ñ":
            start_dt = today - datetime.timedelta(days=90)
        elif choice == "üïì —É–≤–µ—Å—å —á–∞—Å":
            start_dt = datetime.date(2000, 1, 1)
        elif choice == "‚úçÔ∏è –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç–∏ –≤—Ä—É—á–Ω—É":
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—á–∞—Ç–∫—É –ø–µ—Ä—ñ–æ–¥—É (dd.mm.yyyy):", reply_markup=None)
            await state.set_state(ReportPeriodState.waiting_for_start)
            return
        elif choice == "üîô –≤–∏—Ö—ñ–¥":
            await message.answer("üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é. –û–±–µ—Ä—ñ—Ç—å –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é üëá", reply_markup=get_main_menu())
            await state.clear()
        else:
            await message.answer(
                "üîò –û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂—á–µ –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å '–í–≤–µ—Å—Ç–∏ –¥–∞—Ç–∏ –≤—Ä—É—á–Ω—É' –¥–ª—è –±—ñ–ª—å—à–æ—ó –≥–Ω—É—á–∫–æ—Å—Ç—ñ.")
            return

        start_str = start_dt.strftime("%Y-%m-%d")
        end_str = end_dt.strftime("%Y-%m-%d")

        report_url = f"{API_BASE_URL}/expenses/report/?user_id={user_id}&start_date={start_str}&end_date={end_str}"
        try:
            resp_report = requests.get(report_url)
            if resp_report.status_code == 200:
                file_bytes = resp_report.content
                doc = BufferedInputFile(
                    file=file_bytes,
                    filename="report.xlsx"
                )
                await message.answer_document(
                    document=doc,
                    caption=f"–í–∞—à –∑–≤—ñ—Ç –∑–∞ –ø–µ—Ä—ñ–æ–¥: {choice.capitalize()}."
                )
                resp_list = requests.get(
                    f"{API_BASE_URL}/expenses/?user_id={user_id}&start_date={start_str}&end_date={end_str}"
                )
                if resp_list.status_code == 200:
                    expenses_json = resp_list.json()
                    total = sum(item["amount_uah"] for item in expenses_json)
                    await message.answer(f"üí∏ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏—Ç—Ä–∞—Ç: {total} UAH.")
                else:
                    await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            else:
                await message.answer("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç —ñ–∑ —Å–µ—Ä–≤–µ—Ä–∞.")
        except Exception as e:
            await message.answer(f"‚ùó –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–≤—ñ—Ç—É")

        await message.answer("üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...", reply_markup=get_main_menu())
        await state.clear()

    # –°—Ç–∞—Ä–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π ¬´–í–≤–µ–¥–µ–Ω–Ω—è –¥–∞—Ç –≤—Ä—É—á–Ω—É¬ª

    @dp.message(StateFilter(ReportPeriodState.waiting_for_start))
    async def process_report_start_date(message: Message, state: FSMContext):

        try:
            d_start = datetime.datetime.strptime(message.text, "%d.%m.%Y").date()
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (dd.mm.yyyy).")
            return

        await state.update_data(report_start_date=str(d_start))
        await message.answer("üìÖ –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –∫—ñ–Ω—Ü—è –ø–µ—Ä—ñ–æ–¥—É (dd.mm.yyyy):")
        await state.set_state(ReportPeriodState.waiting_for_end)

    @dp.message(StateFilter(ReportPeriodState.waiting_for_end))
    async def process_report_end_date(message: Message, state: FSMContext):
        try:
            d_end = datetime.datetime.strptime(message.text, "%d.%m.%Y").date()
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (dd.mm.yyyy).")
            return

        data = await state.get_data()
        d_start = data["report_start_date"]
        user_id = message.from_user.id

        try:
            report_url = (
                f"{API_BASE_URL}/expenses/report/?user_id={user_id}"
                f"&start_date={d_start}&end_date={str(d_end)}"
            )
            resp_report = requests.get(report_url)
            if resp_report.status_code == 200:
                file_bytes = resp_report.content

                doc = BufferedInputFile(
                    file=file_bytes,
                    filename="report.xlsx"
                )

                await message.answer_document(
                    document=doc,
                    caption="üìä –û—Å—å –≤–∞—à –∑–≤—ñ—Ç –∑–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥:"
                )

                resp_list = requests.get(
                    f"{API_BASE_URL}/expenses/?user_id={user_id}"
                    f"&start_date={d_start}&end_date={str(d_end)}"
                )
                if resp_list.status_code == 200:
                    expenses_json = resp_list.json()
                    total = sum(item["amount_uah"] for item in expenses_json)
                    await message.answer(f"üí∞ –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏—Ç—Ä–∞—Ç –∑–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥: {total} UAH.")
                else:
                    await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
            else:
                await message.answer("‚ùó –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∑–≤—ñ—Ç—É")
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑–≤—ñ—Ç —ñ–∑ —Å–µ—Ä–≤–µ—Ä–∞.")

        await message.answer("üîô –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é...", reply_markup=get_main_menu())
        await state.clear()

    #  ----------------- –í–ò–î–ê–õ–ò–¢–ò –°–¢–ê–¢–¢–Æ –í–ò–¢–†–ê–¢ (DELETE EXPENSE)----------------

    @dp.message(F.text == "‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç–∞—Ç—Ç—é")
    async def delete_expense_cmd(message: Message, state: FSMContext):
        user_id = message.from_user.id
        url = f"{API_BASE_URL}/expenses/?user_id={user_id}"
        try:
            r = requests.get(url)
            if r.status_code == 200:
                expenses_list = r.json()
                if not expenses_list:
                    await message.answer(
                        "üòû –£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç. –î–æ–¥–∞–π—Ç–µ –Ω–æ–≤—É –≤–∏—Ç—Ä–∞—Ç—É, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ '–î–æ–¥–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é –≤–∏—Ç—Ä–∞—Ç'.")
                    return

                from openpyxl import Workbook
                from io import BytesIO
                wb = Workbook()
                ws = wb.active
                ws.title = "All Expenses"
                ws.append(["ID", "Title", "Date", "UAH", "USD"])
                for exp in expenses_list:
                    ws.append([
                        exp["id"],
                        exp["title"],
                        exp["date"],
                        exp["amount_uah"],
                        exp["amount_usd"]
                    ])
                bio = BytesIO()
                wb.save(bio)
                bio.seek(0)

                bio.seek(0)
                file_bytes = bio.read()

                xlsx_file = BufferedInputFile(
                    file=file_bytes,
                    filename="all_expenses.xlsx"
                )

                await message.answer_document(
                    document=xlsx_file,
                    caption="üìä –°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –≤–∏—Ç—Ä–∞—Ç —ñ–∑ —ó—Ö ID:"
                )
                await message.answer("üóëÔ∏è –í–≤–µ–¥—ñ—Ç—å ID —Å—Ç–∞—Ç—Ç—ñ, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏:")
                await state.set_state(DeleteExpenseState.waiting_for_id)
            else:
                await message.answer("‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–∏—Ç—Ä–∞—Ç.")
        except Exception as e:
            await message.answer(f"‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ API: {e}")

    @dp.message(StateFilter(DeleteExpenseState.waiting_for_id))
    async def process_delete_expense_id(message: Message, state: FSMContext):
        try:
            exp_id = int(message.text)
        except ValueError:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID (—á–∏—Å–ª–æ).")
            return

        user_id = message.from_user.id
        delete_url = f"{API_BASE_URL}/expenses/{exp_id}?user_id={user_id}"
        try:
            r = requests.delete(delete_url)
            if r.status_code == 200:
                await message.answer("‚úÖ –í–∏—Ç—Ä–∞—Ç—É –≤–∏–¥–∞–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!", reply_markup=get_main_menu())
            else:
                await message.answer("‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É.", reply_markup=get_main_menu())
        except Exception as e:
            await message.answer(f"‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: {e}", reply_markup=get_main_menu())

        await state.clear()

    # -------------- –†–ï–î–ê–ì–£–í–ê–¢–ò –°–¢–ê–¢–¢–Æ –í–ò–¢–†–ê–¢ (EDIT EXPENSE) ----------------------

    @dp.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å—Ç–∞—Ç—Ç—é")
    async def edit_expense_cmd(message: Message, state: FSMContext):
        user_id = message.from_user.id
        url = f"{API_BASE_URL}/expenses/?user_id={user_id}"
        try:
            r = requests.get(url)
            if r.status_code == 200:
                expenses_list = r.json()
                if not expenses_list:
                    await message.answer("–£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≤–∏—Ç—Ä–∞—Ç.")
                    return

                wb = Workbook()
                ws = wb.active
                ws.title = "All Expenses"
                ws.append(["ID", "Title", "Date", "UAH", "USD"])
                for exp in expenses_list:
                    ws.append([
                        exp["id"],
                        exp["title"],
                        exp["date"],
                        exp["amount_uah"],
                        exp["amount_usd"]
                    ])
                bio = BytesIO()
                wb.save(bio)
                bio.seek(0)

                file_bytes = bio.read()
                xlsx_file = BufferedInputFile(
                    file=file_bytes,
                    filename="all_expenses.xlsx"
                )

                await message.answer_document(
                    document=xlsx_file,
                    caption="–°–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –≤–∏—Ç—Ä–∞—Ç —ñ–∑ —ó—Ö ID."
                )
                await message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å ID —Å—Ç–∞—Ç—Ç—ñ, —è–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:")
                await state.set_state(EditExpenseState.waiting_for_id)
            else:
                await message.answer("‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤–∏—Ç—Ä–∞—Ç.")
        except Exception as e:
            await message.answer(f"‚ùó –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")

    @dp.message(StateFilter(EditExpenseState.waiting_for_id))
    async def process_edit_expense_id(message: Message, state: FSMContext):
        try:
            exp_id = int(message.text)
        except ValueError:
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID (—á–∏—Å–ª–æ).")
            return

        user_id = message.from_user.id
        url = f"{API_BASE_URL}/expenses/?user_id={user_id}"
        try:
            resp = requests.get(url)
            if resp.status_code == 200:
                expenses_list = resp.json()
                exp_found = None
                for e in expenses_list:
                    if e["id"] == exp_id:
                        exp_found = e
                        break
                if not exp_found:
                    await message.answer("‚ùó –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤–∏—Ç—Ä–∞—Ç–∏ –∑ —Ç–∞–∫–∏–º ID.")
                    await state.clear()
                    return

                await state.update_data(expense_id=exp_id)

                await message.answer(
                    f"–ü–æ—Ç–æ—á–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:\n"
                    f"–ù–∞–∑–≤–∞: {exp_found['title']}\n"
                    f"–î–∞—Ç–∞: {exp_found['date']}\n"
                    f"–°—É–º–∞ UAH: {exp_found['amount_uah']}\n\n"
                    "–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏:",
                    reply_markup=get_edit_options_keyboard()
                )

                await state.set_state(EditExpenseState.waiting_for_choice)

            else:
                await message.answer("‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –≤–∏—Ç—Ä–∞—Ç.")
                await state.clear()
        except Exception as e:
            await message.answer(f"‚ùó –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ API: {e}")
            await state.clear()

    @dp.message(StateFilter(EditExpenseState.waiting_for_choice))
    async def process_edit_choice(message: Message, state: FSMContext):

        choice = message.text.lower()

        if choice == "üìù —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É":
            await message.answer("üìù –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É —Å—Ç–∞—Ç—Ç—ñ:", reply_markup=None)
            await state.set_state(EditExpenseState.waiting_for_new_title)
        elif choice == "üìÜ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Å—É–º—É":
            await message.answer("üí∏ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Å—É–º—É (UAH):", reply_markup=None)
            await state.set_state(EditExpenseState.waiting_for_new_amount)
        elif choice == "üîô –≤–∏—Ö—ñ–¥":
            await message.answer("–ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
            await state.clear()
        else:
            await message.answer("üìã –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –ø—É–Ω–∫—Ç—ñ–≤ –º–µ–Ω—é –∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–í–∏—Ö—ñ–¥¬ª.")

    @dp.message(StateFilter(EditExpenseState.waiting_for_new_title))
    async def edit_title(message: Message, state: FSMContext):
        new_title = message.text
        data = await state.get_data()
        exp_id = data["expense_id"]
        user_id = message.from_user.id

        update_payload = {"title": new_title}

        put_url = f"{API_BASE_URL}/expenses/{exp_id}?user_id={user_id}"
        try:
            r = requests.put(put_url, json=update_payload)
            if r.status_code == 200:
                await message.answer(
                    "‚úÖ –ù–∞–∑–≤—É –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!",
                    reply_markup=get_main_menu()
                )
            else:
                await message.answer(
                    "‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –Ω–∞–∑–≤—É!",
                    reply_markup=get_main_menu()
                )
        except Exception as e:
            await message.answer(
                f"‚ùó –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ API: {e}",
                reply_markup=get_main_menu()
            )

        await state.clear()

    @dp.message(StateFilter(EditExpenseState.waiting_for_new_amount))
    async def edit_amount(message: Message, state: FSMContext):
        text = message.text.replace(",", ".")
        try:
            new_amt = float(text)
        except ValueError:
            await message.answer("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ (—Ü–∏—Ñ—Ä–∏, –∑ –∫—Ä–∞–ø–∫–æ—é –∞–±–æ –∫–æ–º–æ—é).")
            return

        data = await state.get_data()
        exp_id = data["expense_id"]
        user_id = message.from_user.id

        update_payload = {"amount_uah": new_amt}

        put_url = f"{API_BASE_URL}/expenses/{exp_id}?user_id={user_id}"
        try:
            r = requests.put(put_url, json=update_payload)
            if r.status_code == 200:
                await message.answer(
                    "‚úÖ –°—É–º—É –æ–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!",
                    reply_markup=get_main_menu()
                )
            else:
                await message.answer(
                    "‚ùó –ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—É–º—É!",
                    reply_markup=get_main_menu()
                )
        except Exception as e:
            await message.answer(
                f"‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ API: {e}",
                reply_markup=get_main_menu()
            )

        await state.clear()


#   ---------------- –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –ó–ê–ü–£–°–ö–£ –ë–û–¢–ê --------------------


async def main():
    bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
    dp = Dispatcher(storage=MemoryStorage())

    register_handlers(dp)

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
